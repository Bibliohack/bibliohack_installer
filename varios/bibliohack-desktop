#!/bin/bash

[[ "$1" != "" ]] && BIBLIOHACK_ORIG="$1" || error_msg "error: BIBLIOHACK_ORIG='$BIBLIOHACK_ORIG'"

function check_and_remove_pkg() {

  for pkg in "$@"; do
      echo "$pkg"
      if dpkg-query -W --showformat='${Status}\n' "$pkg" 2>/dev/null | grep -q "install ok installed"
       then
         sudo apt-get -y remove "$pkg" || { echo "error! '$pkg'"; return 1; }
         echo "OK, '$pkg' removed"
      fi
      echo "OK, '$pkg' not installed"
   done
   return 0
}

function check_and_install_pkg() {
   for pkg in "$@"; do
      echo "$pkg"
      if dpkg-query -W --showformat='${Status}\n' "$pakg" 2>/dev/null | grep -q "install ok installed"
       then
         echo "OK, '$pkg' already installed"
      else
         sudo apt-get -y install "$pkg" || { echo "error! '$pkg'"; return 1; }
      echo "OK, '$pkg' installed"
      fi
   done
   return 0
}

dpkg_install() {
	[[ ! -z "$1" ]] && ORIGDPKG="$1" || return 1
	current_folder="$PWD"
	cd "$ORIGDPKG"
	sudo dpkg -iEG *.deb || {
		>&2 echo "ERROR al instalar con dpkg"
		cd "$current_folder"
		return 1
	}
	cd "$current_folder"
	return 0
}

cp_and_untar() {
	# ORIGPATH: path/to/file.tar.gz; DESTDIR: path/to/dir; TARBASECUSTOM: alt tar dir basename (opt)
	[[ ! -z "$1" ]] && ORIGPATH="$1" || return 1
	[[ ! -z "$2" ]] && DESTDIR="$2" || return 1
	[[ ! -z "$3" ]] && TARBASECUSTOM="$3"
	[[ -f "$ORIGPATH" ]] || return 1
	[[ -d "$DESTDIR" ]] || return 1

	current="$PWD"
   cd "$DESTDIR"
	if tar -tf "$ORIGPATH" >/dev/null 2>&1; then
		cp "$ORIGPATH" "$DESTDIR" | exit 1
		TARFILE=`basename "$ORIGPATH"`
		TARBASE=`tar -tf "$TARFILE" | sort | head -1`
		if [[ -z "$TARBASECUSTOM" ]]; then
			tar xf "$TARFILE"
			[[ -d "$TARBASE" ]] && ret=0 || ret=1
			cd "$current"
			return $ret
		else
			mkdir "$TARBASECUSTOM" || exit 1
			tar xf "$TARFILE" -C "$TARBASECUSTOM" --strip-components=1 && ret=0 || ret=1
			cd "$current"
			return $ret
		fi
	else
		cd "$current"
		return 1
	fi
}


case $(tty) in 
 /dev/tty[0-9]*)
   echo "Verificando terminal: OK" 
   ;;
 *)
   echo "Este script debe ejecutarse desde una terminal virtual," 
   echo "no dentro de un emulador de terminal en una sesion grafica."
   echo "Use Ctrl + Alt + una tecla de función, por ejemplo Ctrl + Alt + F3"
   echo "Luego ingrese su usuario/contraseña de linux"
   exit 1
esac

OSNAME=`lsb_release -is`
CODENM=`lsb_release -cs`
RELEASN=`lsb_release -rs`

if [ "$RELEASN" == '18.04' ] && [ "$OSNAME" == 'Ubuntu' ]
 then
   echo "Instalando en: $OSNAME $RELEASN $CODENM"
else
   echo "Este script es para instalar Bibliohack en Ubuntu 18.04"
   exit 1
fi

ARCH="$(uname -m)"

OWN_PATH="$PWD/$0"
CURRENT_USER="$USER"

if [ "$CURRENT_USER" == "root" ]
 then
  echo "Este script no debe ejecutarse como 'root'"
  echo "Ejecutelo con el usuario de bibliohack"
  exit 1
fi

# ==================== instalacion de entorno de escritorio ============

GNOMEBOOKMARKS_FILE="/home/bibliohack/.config/gtk-3.0/bookmarks"

GNOMEBOOKMARKS_CONTENT=$(cat <<EOF

file:///home/bibliohack/Archivo
file:///home/bibliohack/Descargas

EOF
)

LIGHTDM_CONF_FILE="/etc/lightdm/lightdm.conf"

LIGHTDM_CONF_CONTENT==$(cat <<EOF
[Seat:*]
greeter-session=sleck-greeter

EOF
)

GNOMEPANELS_FILE="/usr/share/gnome-panel/panel-default-layout.layout"

GNOMEPANELS__CONTENT=$(cat <<EOF

[Toplevel bottom-panel]
expand=true
orientation=bottom
size=24
y-bottom=0

[Object menu-bar]
object-iid=PanelInternalFactory::MenuBar
toplevel-id=bottom-panel
pack-index=0

[Object window-list]
object-iid=WnckletFactory::WindowListApplet
toplevel-id=bottom-panel
pack-index=1

[Object indicators]
object-iid=IndicatorAppletCompleteFactory::IndicatorAppletComplete
toplevel-id=bottom-panel
pack-type=end
pack-index=0

[Object workspace-switcher]
object-iid=WnckletFactory::WorkspaceSwitcherApplet
toplevel-id=bottom-panel
pack-type=end
pack-index=1

EOF
)


sudo systemctl stop gdm3

# instalar lightdm gnome-session-flashback slick-greeter lightdm-settings
# #check_and_install_pkg 'lightdm' 'gnome-session-flashback' 'slick-greeter' 'lightdm-settings' 'arc-theme' || { echo "error!"; return 1; }
dpkg_install "$BIBLIOHACK_ORIG/deb/bibliohack-desktop"

check_and_remove_pkg 'ubuntu-session' 'gdm3' || { echo "error!"; exit 1; }

sudo echo $LIGHTDM_CONF_CONTENT > "$LIGHTDM_CONF_FILE" || exit 1

sudo dpkg-reconfigure lightdm

# varios desktop config

# que deje de aparecer el popup de actualizaciones de software
gsettings set com.ubuntu.update-notifier no-show-notifications true || exit 1

# desinstalar tambien unattended-upgrades:
sudo apt-get remove unattended-upgrades || exit 1

# que el explorador de archivos muestre rutas que se puedan copiar:
gsettings set org.gnome.nautilus.preferences always-use-location-entry true || exit 1

# Eliminar bookmarks por defecto y agregar "Archivo"
sudo echo $GNOMEBOOKMARKS_CONTENT > "$GNOMEBOOKMARKS_FILE" || exit 1

## https://askubuntu.com/questions/1091972/how-do-i-create-app-folders-in-the-gnome-application-menu
## https://developer.gnome.org/integration-guide/stable/desktop-files.html.en
## https://askubuntu.com/questions/495938/script-adding-launchers-to-the-top-gnome-panel%20 (!) panel
## https://developer.gnome.org/integration-guide/stable/desktop-files.html.en

gsettings set org.gnome.desktop.app-folders folder-children "['Bibliohack']"

gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/Bibliohack/ apps "['dalclick.desktop', 'dalproc.desktop']"

gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/Bibliohack/ name 'Bibliohack'

# ? gnome-tweaks

# arc-theme

# dconf-tools
# gnome-tweaks

# solucionar el problema del nuevo comporatmiento del explorador de archivos
# (busqueda general cuando se tipea, en vez de ir a los archivso listados)
# https://askubuntu.com/questions/275883/traditional-search-as-you-type-on-newer-nautilus-versions
# https://askubuntu.com/questions/1037732/type-ahead-search-using-nautilus-on-ubuntu-18-04


## NOTA
## Para eliminar las carpetas personales
#     cd ~/.config
#     cp /etc/xdg/user-dirs.conf .
#     # cambiar la linea enabled=True por enabled=False
#     # modificar ~/.config/user-dirs.dirs


# telegram

sudo apt-get install -y telegram-desktop

telegram_desktop_entry="[Desktop Entry]
Type=Application
Exec=telegram-desktop
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name[es_AR]=Telegram
Name=Telegram
Comment[es_AR]=
Comment="

autostart_path="~/.config/autostart"

if [[ ! -d "$autostart_path" ]]
 then
   mkdir "$autostart_path" || { echo "error!"; return 1; }
fi

echo "$telegram_desktop_entry" > "$autostart_path/telegram-desktop.desktop" || { echo "error!"; return 1; }

# micro

[[ -f /usr/bin/micro ]] || {
   sudo apt-get -y install curl xclip && cd /usr/bin && curl https://getmic.ro | sudo bash ||  { echo "error!"; return 1; }
   cd
   echo "micro installed"
}

# keybase

sudo apt-get -y install gconf-service gconf-service-backend gconf2-common libappindicator1 || { echo "error!"; return 1; }

cd /opt || { echo "error!"; return 1; }

if [ "$ARCH" == "x86_64" ]
 then
   sudo curl -O https://prerelease.keybase.io/keybase_amd64.deb
elif [ "$ARCH" == "i386" ] || [ "$ARCH" == "i686" ]
   sudo curl -O https://prerelease.keybase.io/keybase_i386.deb
fi 

if [[ -f "keybase_amd64.deb" ]]
  then
   sudo dpkg -i keybase_amd64.deb && sudo apt-get install -f 
   #run_keybase
   echo "OK: keybase instalado!"
   keybase signup
else
   echo "error: keybase no instalado"
fi
