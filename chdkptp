#!/bin/bash

# .chdkptp install|uninstall
#    nota: el script siempre pregunta por un perfil de instalacion

# ./chdkptp install|uninstall profile=d|u || echo "fail"

function set_chdkptp_profile {

    if [[ "$1" =~ "d"|"u" ]]
     then
       profile="$1"
       echo "perfil de intalacion: '$profile'"
    else
      echo "Seleccione el perfil de instalación para CHDKPTP:"
      echo " - 'd' para versión dalclick"
      echo " - 'u' para última versión"
      echo " - 's' para salir"
      echo "(por defecto 'd')"
      read -p ">> " sel
      echo ""

      if [ "$sel" == "u" ]; then profile="u"
      elif [ "$sel" == "s" ]; then echo "Eligió salir."; exit 0
      else profile="d"
      fi
      PRINT_SELEC="Yes"
    fi

    if [ "$profile" == "u" ]
     then
      [[ "$PRINT_SELEC" == "Yes" ]] && \
        echo -e "Seleccionando version de CHDKPTP para 'última versión' (u)\n"
      CHDKPTP_VER=""
      IUP_VER="3.23"
      CD_VER="5.11.1"
      IM_VER="3.12"
    elif [ "$profile" == "d" ]
     then
      [[ "$PRINT_SELEC" == "Yes" ]] && \
        echo -e "Seleccionando version de CHDKPTP para 'dalclick' (d)\n"
      CHDKPTP_VER="461"
      IUP_VER="3.8"
      CD_VER="5.6.1"
      IM_VER="3.8.2"
    else
      >&2 echo "ERROR: profile = '$profile'"
      exit 1
    fi
}

function set_packages_param {

    # echo "Instalando en: $OSNAME $RELEASN $CODENM"

    if [ "$RELEASN" == '18.04' ] && [ "$OSNAME" == 'Ubuntu' ]
     then
      DEPS="libusb-1.0-0 libusb-dev  libusb-1.0-0-dev libreadline-dev libcairo2-dev subversion git" # libreadline6-dev #liblua5.1-0 lua5.1 liblua5.1-0-dev lua5.2 liblua5.2-dev
      # apt selecciona libreadline-dev sobre libreadline6-dev, 
      # si dejamos los dos, entonces tools/check_pkgs informa que faltan dependencias y se llama a apt
    else
      #TODO: checkear dependencias en ubuntu 16.04 y debian 7.11
      DEPS="libusb-1.0-0 libusb-dev  libusb-1.0-0-dev libreadline-dev libreadline6-dev libcairo2-dev subversion git" #liblua5.1-0 lua5.1 liblua5.1-0-dev lua5.2 liblua5.2-dev
    fi
    # tecgraf deps "lua5.1 liblua5.1-0-dev lua5.2 liblua5.2-dev libfreetype6-dev" # libftgl-dev zlib1g-dev

    [[ "$PRINT_SELEC" == "Yes" ]] && {
        echo -e "Version a instalar:\n"
        echo "chdkptp: '$CHDKPTP_VER'"
        echo ""
        echo "Presione ENTER para continuar"
        echo "o CONTROL+C para cancelar"
        read -p ">> " continuar
    }
}

function install_chdkptp {
	echo "Verificando directorio para instalación"
	"$OWN_DIR/tools/check_src_dir" "$CHDKPTP_DIR" && echo "OK" || {
	    >&2 echo "ERROR: no se pudo crear o modificar '$CHDKPTP_DIR'"
	    exit 1
	}

	if ! "$OWN_DIR/tools/check_pkgs" $DEPS; then
	    if [ "root" != "$CURRENT_USER" ]; then
	        if [ "$ORIG_DPKG_DIR" != "" ]; then
	    			current_folder="$PWD"
              	cd "$ORIG_DPKG_DIR"
  	            "$OWN_DIR/tools/run_as_root" "dpkg -i" *.deb || {
  	                >&2 echo "ERROR al instalar con dpkg"
  	                exit 1
  	            }
  	            cd "$current_folder"
	        else
		        echo "para instalar paquetes con apt-get es necesario hacerse root..."
		        "$OWN_DIR/tools/run_as_root" "apt-get install" "$DEPS" || {
		            >&2 echo "ERROR al instalar con apt-get"
		            exit 1
		        }
	        fi
	    else
	    	  if [ "$ORIG_DPKG_DIR" != "" ]; then
               current_folder="$PWD"
           	   cd "$ORIG_DPKG_DIR"
               dpkg -i *.deb || {
                   >&2 echo "ERROR al instalar con dpkg"
                   exit 1
               }
               cd "$current_folder"
           else
		        apt-get install $DEPS || {
		            >&2 echo "ERROR al instalar con apt-get"
		            exit 1
		        }
		     fi
	    fi
	fi
	
	
	if [ "$ORIG_URL" != "" ]; then
	   FILE="${ORIG_URL##*/}"
	   FILE_WE=`basename $FILE tar.gz`
		wget -N "$ORIG_URL" -P "$CHDKPTP_DIR" || exit 1
		cd "$CHDKPTP_DIR" || exit 1
		tar xzvf "$FILE"
		cd "$FILE_WE" || { echo "no existe $FILE_WE! falló la instalación"; exit 1; }
	elif [ "$ORIG_PATH" != "" ]; then
	   FILE="${ORIG_PATH##*/}"
	   FILE_WE=`basename $FILE .tar.gz`
		cd "$CHDKPTP_DIR" || exit 1
		cd ../
		cp -rp "$ORIG_PATH" . || exit 1
		tar xzvf "$FILE"
		cd "$FILE_WE" || { echo "no existe $FILE_WE! falló la instalación"; exit 1; }	
	else
		svn co http://subversion.assembla.com/svn/chdkptp/trunk "$CHDKPTP_DIR"
		cd "$CHDKPTP_DIR"
		if [ "${CHDKPTP_VER}" != "" ]; then
			echo "revirtiendo a la versión '${CHDKPTP_VER}'..."
			svn up -r${CHDKPTP_VER} || exit 1
		fi
	fi
	config_file=`get_config_file`
   echo "$config_file"
	echo "$config_file" > config.mk || exit 1
	make && return 0 || return 1
}

function get_config_file {
  IUP_LIB_DIR=`$TECGRAF_COMMAND print_path=iup tecgraf_dir=$TECGRAF_DIR`
  CD_LIB_DIR=`$TECGRAF_COMMAND print_path=cd tecgraf_dir=$TECGRAF_DIR`
  if [[ "$IUP_LIB_DIR" == "" ]] || [[ "$CD_LIB_DIR" == "" ]]; then exit 1; fi
  config_file_d="
IUP_SUPPORT=1
CD_SUPPORT=1
CD_USE_PLUS=cairo
PTPIP_SUPPORT=0

LUA_INCLUDE_DIR=/usr/include/lua5.1
LUA_LIB=lua5.1

DEBUG=1

IUP_LIB_DIR=${IUP_LIB_DIR}
IUP_INCLUDE_DIR=${IUP_LIB_DIR}/include
CD_LIB_DIR=${CD_LIB_DIR}
CD_INCLUDE_DIR=${CD_LIB_DIR}/include
"
#TODO!! chequear config_file_u!!
  config_file_u="
IUP_SUPPORT=1
CD_SUPPORT=1
CD_USE_PLUS=cairo
PTPIP_SUPPORT=0

LUA_INCLUDE_DIR=/usr/include/lua5.1
LUA_LIB=lua5.1

DEBUG=1

IUP_LIB_DIR=${IUP_LIB_DIR}
IUP_INCLUDE_DIR=${IUP_LIB_DIR}/include
CD_LIB_DIR=${CD_LIB_DIR}
CD_INCLUDE_DIR=${CD_LIB_DIR}/include
"
if [ "$profile" == 'u' ]
 then
  echo "$config_file_u"
  return 0
elif  [ "$profile" == 'd' ]
 then
  echo "$config_file_d"
  return 0
else
  return 1
fi
}

function test_chdkptp {
  cd "$CHDKPTP_DIR"
  [[ -f ./chdkptp ]] || return 1
  export LUA_PATH="./lua/?.lua"
  chdkptp_out=$( ./chdkptp -h | head -n 1 )
  if [ "$chdkptp_out" == "CHDK PTP control utility" ]; then
    return 0
  else
    return 1
  fi
}

function check_tecgraf_ver { # tambien version!
  fail=''
  for lib in 'iup' 'cd' 'im'; do
    if ${TECGRAF_COMMAND} "print_ver=${lib}" > /dev/null 2>&1
     then
      required_ver=$( eval echo "\$${lib^^}_VER" )
      installed_ver=`${TECGRAF_COMMAND} "print_ver=${lib}"`
      echo -n "${lib}: instalada:'$installed_ver' requerida:'$required_ver' .."
      [[ "$installed_ver" == "$required_ver" ]] && {
        echo "OK"
      } || {
        echo "FAIL"
        fail="Yes"
      }
    else
      >&2 echo "ERROR: '$lib' no instalada."
      return 1
    fi
  done
  [[ "$fail" == "Yes" ]] && return 1 || return 0
}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = #

[[ "`uname -o`" == "GNU/Linux" ]] || {
   echo "Este script solo puede utilizarse en sistemas 'GNU/Linux'"
   exit 1
}
#[[ "`uname -m`" == "x86_64" ]] && TYPE="_64" || TYPE=""

OSNAME=`lsb_release -is`
CODENM=`lsb_release -cs`
RELEASN=`lsb_release -rs`

if [ "$RELEASN" == '18.04' ] && [ "$OSNAME" == 'Ubuntu' ]; then
   : 
else
	echo "Este instalador no ha sido probado en $OSNAME $RELEASE"
	echo "OK en Ubuntu 18.04"
	echo "continuar? (s/N)"
	read tecla
	if [ "$tecla" != "s" ] || [ "$tecla" != "S" ]; then exit 0; fi
fi

OWN_SCRIPT_DIR=$(dirname "$0")
cd "$OWN_SCRIPT_DIR"
OWN_DIR="$(pwd -P)"
OWN_PATH="$OWN_DIR/$0"

CURRENT_USER="$USER"

TECGRAF_COMMAND="$PWD/tecgraf"

SRCDIR=/opt/src
CHDKPTP_DIR=$SRCDIR/chdkptp
TECGRAF_DIR=$SRCDIR/tecgraf

PROFILE_OPTION=''
ACTION=''

ORIG_DPKG_DIR=""

if [ "$1" == "" ]; then
   ACTION="install"
else
	while [ $# -ne 0 ]
	do
	   arg="$1"
		case "$arg" in
		   profile=*)
		   	PROFILE_OPTION="${arg#*=}"
		   ;;
		   tecgraf_dir=*)
		   	ALT_TECGRAF_DIR="${arg#*=}"
		   ;;
		   chdkptp_dir=*)
		   	ALT_CHDKPTP_DIR="${arg#*=}"
		   ;;
		   orig_path=*)
		   	ORIG_PATH="${arg#*=}"
		   ;;
		   orig_dpkg_dir=*)
		   	ORIG_DPKG_DIR="${arg#*=}"
		   ;;
		   orig_url=*)
		   	ORIG_URL="${arg#*=}"
		   ;;
		   uninstall)
		   	ACTION='uninstall'
		   ;;
		   install)
		   	ACTION='install'
		   ;;
		   test)
		   	ACTION='test'
		   ;;
		   *)
	      	>&2 echo "ERROR: parametro desconocido '$1'"
		      exit 1
		esac
		shift
	done
fi

if [ "$ALT_TECGRAF_DIR" != "" ]; then
	echo "Comprobando '$ALT_TECGRAF_DIR'"
	[[ -d "$ALT_TECGRAF_DIR" ]] || { echo "'$ALT_TECGRAF_DIR' no existe"; exit 1; }
	TECGRAF_DIR="$ALT_TECGRAF_DIR"
fi

if [ "$ALT_CHDKPTP_DIR" != "" ]; then
	echo "Comprobando '$ALT_CHDKPTP_DIR'"
	[[ -d "$ALT_CHDKPTP_DIR" ]] || { echo "'$ALT_CHDKPTP_DIR' no existe"; exit 1; }
	CHDKPTP_DIR="$ALT_CHDKPTP_DIR"
fi

if [[ "$CHDKPTP_DIR" =~ ^"/opt/src" ]]; then
	echo "Verificando directorio /opt/src"
	"$OWN_DIR/tools/check_src_dir" "/opt/src" && echo "OK" || {
	    >&2 echo "ERROR: no existe o permisos insuficientes en '/opt/src'"
	    exit 1
	}
fi

if [ "$ORIG_PATH" != "" ]; then
	echo "Comprobando '$ORIG_PATH'"
	[[ -f "$ORIG_PATH" ]] || { echo "'$ORIG_PATH' no existe"; exit 1; }
fi

if [ "$ORIG_DPKG_DIR" != "" ]; then
	echo "Comprobando $ORIG_DPKG_DIR"
	[[ -d "$ORIG_DPKG_DIR" ]] || { echo "'$ORIG_DPKG_DIR' no existe"; exit 1; }
fi


case "$ACTION" in
   install)
      test_chdkptp && { echo "chdkptp ya esta instalado"; exit 0; }
      set_chdkptp_profile "$PROFILE_OPTION" # $2=profile=d\u
      check_tecgraf_ver || { echo "Dependencias insastifechas: librerías tecgraf. Ejecute '/opt/src/instaladores/tecgraf'"; exit 1; }
      set_packages_param
      install_chdkptp || exit 1
      test_chdkptp && { 
      	echo "chdkptp instalado con éxito en '$CHDKPTP_DIR'!"
      	exit 0
      } || { 
      	echo "ERROR: chdkptp no se instaló!"
      	exit 1 
      }
   ;;
   uninstall)
      #TODO
   ;;
   test)
      test_chdkptp && { 
      	echo "chdkptp instalado en '$CHDKPTP_DIR'"
      	exit 0
      } || { 
      	echo "chdkptp NO está instalado en '$CHDKPTP_DIR'"
      	exit 1 
      }
   ;;
esac

exit 0
