#!/bin/bash

help="
Uso:

    tecgraf                        -> Instala iup,cd,im (pregunta por profile).

    tecgraf uninstall              -> Verifica que versiones iup,cd,im están
                                      instaladas e intenta desinstalarlas.

    tecgraf print_ver=iup|cd|im[,51|52|53]
                                   -> Imprime versión iup|cd|im instalada para
                                      la version de lua indicada (51 por defecto)

    tecgraf print_path=iup|cd|im   -> Imprime la ruta a iup|cd|im para chdkptp.

    tecgraf install profile=d|u    -> instala iup,cd,im profile de forma
                                      no interactiva
"
# chequeado en Ubuntu 16.04 OK perfil 'd', no instala LUA 5.2

# TODO: test de errores con
# ./tecgraf install_tecgraf profile=d || echo "fail"

# volver a chequear en Debian Wheezy 3.8/5.6.1/3.8.2 - no se instala para LUA 5.2, porque para esas versiones no corre la variable USE_LUA51
# TODO: debian probar si funciona o no run_as_root
# TODO: ubuntu 16.04 profile=u OK

function set_tecgraf_profile {

    if [[ "$1" =~ ^profile=[d|u]*$ ]]
     then
       profile="${1#*=}"
       echo "perfil de intalacion: '$profile'"
    else
      echo "Seleccione el perfil de instalación para Tecgraf:"
      echo " - 'd' para versión dalclick"
      echo " - 'u' para última versión"
      echo " - 's' para salir"
      echo "(por defecto 'd')"
      read -p ">> " sel
      echo ""

      if [ "$sel" == "u" ]; then profile="u"
      elif [ "$sel" == "s" ]; then echo "Eligió salir."; exit 0
      else profile="d"
      fi

      echo "Seleccione fuente de descarga:"
      echo " - 's' descargar desde sourceforge"
      echo " - 'a' alternativo"
      #echo " por defecto usar tarballs/sourceforgue/alternativo" TODO
      echo "(por defecto 's')"
      read -p ">> " sel
      echo ""

      if [ "$sel" == "a" ]; then SOURCEFORGE="No"
      else SOURCEFORGE="Yes"
      fi

      PRINT_SELEC="Yes"
    fi

    if [ "$profile" == "u" ]
     then
      [[ "$PRINT_SELEC" == "Yes" ]] && \
        echo -e "Configurando versiones de los paquetes tecgraf para 'última versión' (u)\n"
      # r735 March 2017 https://app.assembla.com/spaces/chdkptp/wiki/Changelog
      IUP_VER="3.21"
      IUPLUA_EXTRA_TAR='true'
      CD_VER="5.11.1"
      CDLUA_EXTRA_TAR='true'
      IM_VER="3.12"
      IMLUA_EXTRA_TAR='true'
      lua_vers=( '51' '52' )

    elif [ "$profile" == "d" ]
     then
      [[ "$PRINT_SELEC" == "Yes" ]] && \
        echo -e "Configurando versiones de los paquetes tecgraf para 'dalclick' (d)\n"
      IUP_VER="3.8"           #"3.19.1"
      IUPLUA_EXTRA_TAR=""     #'true'
      CD_VER="5.6.1"          #"5.10"
      CDLUA_EXTRA_TAR=""      #'true'
      IM_VER="3.8.2"          #"3.11"
      IMLUA_EXTRA_TAR=""      #'true'
      lua_vers=( '51' )
    else
      echo "ERROR: profile = '$profile'"
      exit 1
    fi
}

function set_packages_param {

    DEPS="lua5.1 liblua5.1-0-dev lua5.2 liblua5.2-dev libfreetype6-dev" # libftgl-dev zlib1g-dev

    versions=()
    for lib in 'iup' 'cd' 'im'; do
      eval ${lib^^}_TAR=${lib}-\$\{${lib^^}_VER\}_\$\{KERNEL\}\$\{TYPE\}_lib.\$\{TAR_EXT\}
      eval TAR=\$${lib^^}_TAR
      versions+=("$lib: $TAR")
      extra_lua_folder=$( eval echo \$${lib^^}LUA_EXTRA_TAR )
      versions+=("$lib extra_lua_folder: '$extra_lua_folder'")
      if [ "$extra_lua_folder" == "true" ]
       then
         for lua_ver in "${lua_vers[@]}"; do
           eval ${lib^^}LUA${lua_ver}_TAR=${lib}-\$\{${lib^^}_VER\}-Lua${lua_ver}_\$\{KERNEL\}\$\{TYPE\}_lib.\$\{TAR_EXT\}
           eval LUATAR=\$${lib^^}LUA${lua_ver}_TAR
           versions+=("$lib lua$lua_ver tar: '$LUATAR'")
         done
      else
         TAR_FOLDER=$(basename $TAR .$TAR_EXT)
         eval ${lib^^}LUA_FOLDER=\$TAR_FOLDER
      fi
    done

    [[ "$PRINT_SELEC" == "Yes" ]] && {
        echo -e "Paquetes a instalar:\n"
        for line in "${versions[@]}"; do echo "$line"; done
        echo ""
        echo "Presione ENTER para continuar o CONTROL+C para cancelar"
        read -p ">> " continuar
    }
}

function install_libs {
    #current_folder="$PWD"
    items=()
    # verificar si no es necesario correr estos script con la variable USE_LUA51 o USE_LUA52
    for tar in $IUP_TAR $CD_TAR $IM_TAR
    do
        dest=`basename $tar .$TAR_EXT`
        items+=("$TECDIR/$dest;install install_dev;")
    done

    for lua_ver in "${lua_vers[@]}"; do
      for lib in 'IUP' 'CD' 'IM'; do
          extra_lua_folder=$( eval echo \$${lib}LUA_EXTRA_TAR )
          if [ "$extra_lua_folder" == 'true' ]
           then
              tar=$( eval echo \$${lib}LUA${lua_ver}_TAR )
              dest=`basename $tar .$TAR_EXT`
              items+=("$TECDIR/$dest;install install_dev config_lua_module;$lua_ver")
          else
              dest=$( eval echo \$${lib}LUA_FOLDER )
              items+=("$TECDIR/$dest;config_lua_module;$lua_ver")
          fi
      done
    done

    if [ "root" != "$CURRENT_USER" ]
     then
        echo ""
        echo -n "para instalar iup, cd y im en el sistema es "
        echo "necesario hacerse root..."
        for item in "${items[@]}"; do echo "$item"; done
        ./tools/run_as_root ./tools/tecgraf/install_libs "${items[@]}" || {
            echo "install_libs (root) falló"
            return 1
        }
    else
       ./tools/tecgraf/install_libs "${items[@]}"  || {
           echo "install_libs falló"
           return 1
       }
    fi

    cd $current_folder
    return 0
}

function sourceforge_link {
   local tar="$1"
   local infover="${tar%%_*}"
   IFS='-' read -ra data <<< "$infover"
   local lib="${data[0]}"
   if [[ "$lib" == 'im' ]]; then lib='imtoolkit'
   elif [[ "$lib" == 'cd' ]]; then lib='canvasdraw'
   elif [[ "$lib" == 'iup' ]]; then lib='iup'
   else echo "no se pudo generar el enlace para sourceforge"; exit 1
   fi
   local ver="${data[1]}"
   local vlua="${data[2]}"
   if [[ "$vlua" ]]; then lua="$vlua/"; fi
   # "https://sourceforge.net/projects
   echo "https://sourceforge.net/projects/${lib}/files/${ver}/Linux%20Libraries/${vlua}"
   return 0
}

function version_gt { test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; }

function get_installed_libs {

  # set from system
  IUP_VER=""; IUPLUA_EXTRA_TAR=""
  CD_VER=""; CDLUA_EXTRA_TAR=""
  IM_VER=""; IMLUA_EXTRA_TAR=""
  lua_vers=()

  versions=()
  for lua_ver in '51' '52' '53'
   do
     lua_bin="/usr/bin/lua${lua_ver:0:1}.${lua_ver:1:1}"
     [[ -f "$lua_bin" ]]  && lua_vers+=("$lua_ver")
   done

  print_version 'iup' &> /dev/null && {
    IUP_VER=$(print_version 'iup')
    versions+=("iup: $IUP_VER")
    if version_gt "$IUP_VER" "3.15" # (( $(echo "$IUP_VER>3.15" | bc -l) ))
     then
      IUPLUA_EXTRA_TAR="true"
      versions+=("iup extra_lua_folder: $IUPLUA_EXTRA_TAR")
    fi
  } || {
    echo 'ATENCION: Tecgraf IUP no instalado'
    unset IUP_VER;
  }

  print_version 'cd' &> /dev/null && {
    CD_VER=$(print_version 'cd')
    versions+=("cd: $CD_VER")
    if version_gt "$CD_VER" "5.8.2" # (( $(echo "$CD_VER>5.8" | bc -l) )) #5.8.2
     then
      CDLUA_EXTRA_TAR="true"
      versions+=("cd extra_lua_folder: $CDLUA_EXTRA_TAR")
    fi
  } || {
    echo 'ATENCION: Tecgraf CD no instalado'
    unset CD_VER;
  }

  print_version 'im' &> /dev/null && {
    IM_VER=$(print_version 'im')
    versions+=("im: $IM_VER")
    if version_gt "$IM_VER" "3.9.1" # (( $(echo "$IM_VER>3.9" | bc -l) )) #3.9.1
     then
      IMLUA_EXTRA_TAR="true"
      versions+=("im extra_lua_folder: $IMLUA_EXTRA_TAR")
    fi
  } || {
    echo 'ATENCION: Tecgraf IM no instalado'
    unset IM_VER;
  }

  versions+=("Versiones lua:""${lua_vers[*]}")

  echo -e "Paquetes instalados en el sistema:\n"
  for line in "${versions[@]}"; do echo "$line"; done
  echo ""
}

function list_available_folders {
  current_folder="$PWD"
  cd $TECDIR
  echo "Instalaciones tecgraf disponibles en '$TECDIR'"
  echo ""
  ls -1d */
  cd $current_folder
  echo ""
}

function modify_libs {

  echo "Ingrese la versión modificada o ENTER para mantenerla"

  echo "iup: $IUP_VER"
  read -p "> " v
  [[ "$v" ]] && { IUP_VER=$v; echo "  + ingresó '$IUP_VER'"; }

  echo "cd: $CD_VER"
  read -p "> " v
  [[ "$v" ]] && { CD_VER=$v; echo "   + ingresó '$CD_VER'"; }

  echo "im: $IM_VER"
  read -p "> " v
  [[ "$v" ]] && { IM_VER=$v; echo "   + ingresó '$IM_VER'"; }

  echo "kernel: $KERNEL"
  read -p "> " v
  [[ "$v" ]] && { KERNEL=$v; echo "   + ingresó '$KERNEL'"; }

  echo "type: $TYPE"
  read -p "> " v
  [[ "$v" ]] && { TYPE=$v; echo "   + ingresó '$TYPE'"; }

  return 0
}

function uninstall_tecgraf {
    current_folder="$PWD"

    items=()
    for tar in $IUP_TAR $CD_TAR $IM_TAR \
               $IUPLUA51_TAR $IPULUA52_TAR \
               $CDLUA51_TAR $CDLUA52_TAR \
               $IMLUA51_TAR $IMLUA52_TAR
    do
        dest=`basename $tar .$TAR_EXT`
        [[ -d "$TECDIR/$dest" ]] && {
            items+=("$TECDIR/$dest;uninstall;")
        } || echo "'$TECDIR/$dest' no existe, no se puede desinstalar"
    done

    if [ "root" != "$CURRENT_USER" ]
     then
        echo ""
        echo -n "para desinstalar iup, cd y im en el sistema es "
        echo "necesario hacerse root..."
        ./tools/run_as_root ./tools/tecgraf/install_libs "${items[@]}" || {
            echo "install_libs (root) falló"
            return 1
        }
    else
       ./tools/tecgraf/install_libs "${items[@]}"  || {
           echo "install_libs falló"
           return 1
       }
    fi

    cd $current_folder
    return 0
}

function install_tecgraf {
    echo "Verificando directorio para instalación"
    ./tools/check_src_dir $TECDIR && echo "OK" || {
        echo "error: no se pudo crear o modificar '$TECDIR'"
        exit 1
    }

    if ! ./tools/check_pkgs $DEPS; then
        if [ "root" != "$CURRENT_USER" ]; then
            echo "para instalar paquetes con apt-get es necesario hacerse root..."
            # todo check if deb-src enabled
            ./tools/run_as_root "apt-get install" "$DEPS" || {
                echo "error al instalar con apt-get"
                exit 1
            }
        else
            apt-get install $DEPS || {
                echo "error al instalar con apt-get"
                exit 1
            }
        fi
    fi

    for tar in $IUP_TAR $IUPLUA51_TAR $IUPLUA52_TAR \
               $CD_TAR  $CDLUA51_TAR  $CDLUA52_TAR \
               $IM_TAR  $IMLUA51_TAR  $IMLUA52_TAR
    do
        dest=`basename $tar .$TAR_EXT`
        echo -e "\ndescargando '$tar' para instalar en '$dest'\n"
        if [ "$SOURCEFORGE" == "Yes" ]
         then
          URL="$( sourceforge_link $tar )"
        else
          URL="$ALT_URL"
        fi
        if [[ ! "$URL" ]]; then echo " ERROR: falló URL = '$URL'"; exit 1; fi
        ./tools/download_and_untar $tar $URL $TECDIR $dest || exit 1
    done

    install_libs || exit 1
}
function test_tecgraf {
    echo ""
    echo "Verificando instalacion..."
    fail=''
    for lua_ver in "${lua_vers[@]}"
    do
      lua_bin="/usr/bin/lua${lua_ver:0:1}.${lua_ver:1:1}"
      if [[ -f "$lua_bin" ]]
       then
         for lib in 'iup' 'cd' 'im'
          do
            if $lua_bin -e "require '${lib}lua'" &> /dev/null
             then
               echo -n "$lua_bin: ${lib}lua instalado OK! versión: "
               echo -n "${lib}.Version()="
               installed=$( $lua_bin -e "require '${lib}lua'; print(${lib}.Version())" )
               echo "$installed"
               eval intented=\$${lib^^}_VER
               [[ "$intented" != "$installed" ]] && { echo "intented: $intented"; fail="Yes"; }
            else
               echo "'${lib}lua' no instalado en '$lua_ver'"
               fail="Yes"
            fi
         done
      else
         echo "ERROR: debug: '$lua_bin' no existe"
         fail="Yes"
      fi
    done
    [[ "$fail" == "Yes" ]] && return 1 || return 0
}

function print_version {
  [[ "$1" =~ ^(iup|im|cd)$ ]] && {
    lib="$1"
  } || {
    echo "ERROR: debug: print_version: valor no admitido: '$1'"
    return 1
  }

  lua_ver="51"
  lua_bin="/usr/bin/lua5.1"

  [[ "$2" != "" ]] && {
    [[ "$2" =~ ^(51|52|53)$ ]] && {
      lua_ver="$2"
      lua_bin="/usr/bin/lua${lua_ver:0:1}.${lua_ver:1:1}"
    } || {
      echo "ERROR: debug: Versión lua no válida: '$2'"
      return 1
    }
  }

  [[ -f "$lua_bin" ]] || { echo "ERROR: '$lua_bin' no instalado."; return 1; } #TODO chequear lua path para debian!!
  $lua_bin -e "require '${lib}lua'" &> /dev/null && {
    $lua_bin -e "require '${lib}lua'; print(${lib}.Version())"
    return 0
  } || {
    echo "'${lib}' no instalado."
    return 1
  }
}

function print_path {
  [[ "$1" =~ ^(iup|im|cd)$ ]] && lib="$1" || { echo "ERROR: debug: print_path: valor no admitido: '$1'"; return 1; }

  VER=`print_version "${lib}"`
  lib_path="${TECDIR}/${lib}-${VER}_${KERNEL}${TYPE}_lib"
  [[ -d "${lib_path}" ]] && {
    echo "${lib_path}"
    return 0
  } || {
    echo "ERROR! no existe '${lib_path}' para la versión ${VER} de '${lib}'."
    return 1
  }
}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = #

[[ "`uname -o`" == "GNU/Linux" ]] || {
   echo "Este script solo puede utilizarse en sistemas 'GNU/Linux'"
   exit 1
}
KERNEL="Linux32"            #"Linux44" #es para nombre interno del paquete tecgraf
TAR_EXT="tar.gz"
[[ "`uname -m`" == "x86_64" ]] && TYPE="_64" || TYPE=""

ALT_URL='http://codex.bibliohack.org/media/files/tecgraf'
SOURCEFORGE="Yes"
OWN_PATH="$PWD/$0"
CURRENT_USER="$USER"

SRCDIR=/opt/src
TECDIR=$SRCDIR/tecgraf

arg="$1"

case "$arg" in
    uninstall)
        get_installed_libs || exit 1
        echo -e "Presione \n ENTER para desinstalar\n 'M' para modificar\n Control+C para salir\n"
        read -p ">> " continuar
        if [[ "$continuar" =~ ^(M|m)$ ]]; then
           list_available_folders
           modify_libs || exit 1
        fi
        set_packages_param
        uninstall_tecgraf || exit 1
        test_tecgraf
    ;;
    '' | install)
        get_installed_libs || exit 1
        if [ "$IUP_VER" ] || [ "$CD_VER" ] || [ "$IM_VER" ]
         then
           echo "Existen librerías Tecgraf instaladas en su sistema,"
           echo "use './tecgraf uninstall' para desinstalarlas."
           echo
           exit 1;
        fi
        set_tecgraf_profile "$2"
        set_packages_param
        install_tecgraf
        test_tecgraf || exit 1
    ;;
    print_ver=*)
        parg="${arg#*=}"
        parg1="${parg%,*}"
        parg2="${parg#*,}"
        [[ "$parg1" == "$parg2" ]] &&{
          print_version "$parg1" || exit 1
        } || {
          print_version "$parg1" "$parg2" || exit 1
        }
    ;;
    print_path=*)
        print_path "${arg#*=}" || exit 1
    ;;
    help)
        echo "$help"
    ;;
    *)
        echo "ERROR: parametro desconocido '$1'"
        echo "$help"
        exit 1
    ;;
esac

exit 0
