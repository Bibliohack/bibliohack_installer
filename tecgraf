#!/bin/bash

# USO: 
#    ./tecgraf           -> instala iup/cd/im
#    ./tecgraf uninstall -> desinstala iup/cd/im
#    ./tecgraf luatest   -> test si funciona iup/cd/im en lua
#    nota: el script siempre pregunta por un perfil de instalacion

# las opciones 'install_libs' o 'uninstall_libs' las ejecuta el propio script cuando
# necesita volver a ejecutarse como root

# chequeado en Ubuntu 16.04 OK perfil 'd', no instala LUA 5.2

# TODO: test de errores con
# ./tecgraf install_tecgraf profile=d || echo "fail"

# volver a chequear en Debian Wheezy 3.8/5.6.1/3.8.2 - no se instala para LUA 5.2, porque para esas versiones no corre la variable USE_LUA51
# TODO: debian no funciona run_as_root -> probablmente no este pasando los parametros que van en $COMMAND en:  su root -c $COMMAND (ojo, esto esta fixed o no?)

function set_tecgraf_profile {

    if [[ "$1" =~ ^profile=[d|u]*$ ]] 
     then
       profile="${1#*=}"
       echo "perfil de intalacion: '$profile'"
    else
      echo "Seleccione el perfil de instalación para Tecgraf:"
      echo " - 'd' para versión dalclick"
      echo " - 'u' para última versión"
      echo " - 's' para salir"
      echo "(por defecto 'd')" 
      read -p ">> " sel

      if [ "$sel" == "u" ]; then profile="u"
      elif [ "$sel" == "s" ]; then echo "Eligió salir."; exit 0 
      else profile="d"
      fi
      PRINT_SELEC="Yes"
    fi

    if [ "$profile" == "u" ]
     then
      [[ "$PRINT_SELEC" == "Yes" ]] && echo "Configurando versiones de los paquetes tecgraf para 'última versión' (u)"
      IUP_VER="3.23"
      IUPLUA_EXTRA_TAR='true'	
      CD_VER="5.11.1"
      CDLUA_EXTRA_TAR='true'
      IM_VER="3.12"
      IMLUA_EXTRA_TAR='true'
      # NOT_INSTALL_LUA52="Yes"
    elif [ "$profile" == "d" ]
     then
      [[ "$PRINT_SELEC" == "Yes" ]] && echo "Configurando versiones de los paquetes tecgraf para 'dalclick' (d)"
      IUP_VER="3.8"           #"3.19.1"
      IUPLUA_EXTRA_TAR=""     #'true'	
      CD_VER="5.6.1"          #"5.10"
      CDLUA_EXTRA_TAR=""      #'true'
      IM_VER="3.8.2"          #"3.11"
      IMLUA_EXTRA_TAR=""      #'true'
      NOT_INSTALL_LUA52="Yes"
    else
      echo "ERROR: profile = '$profile'"
      exit 1
    fi
}

function set_packages_param {

    DEPS="lua5.1 liblua5.1-0-dev lua5.2 liblua5.2-dev libfreetype6-dev" # libftgl-dev zlib1g-dev

    IUP_TAR=iup-${IUP_VER}_${KERNEL}${TYPE}_lib.${TAR_EXT}
    if [ "$IUPLUA_EXTRA_TAR" == "true" ]
     then
       IUPLUA51_TAR=iup-${IUP_VER}-Lua51_${KERNEL}${TYPE}_lib.${TAR_EXT}
       IPULUA52_TAR=iup-${IUP_VER}-Lua52_${KERNEL}${TYPE}_lib.${TAR_EXT}
    else
       IUPLUA_FOLDER=`basename $IUP_TAR .$TAR_EXT`
    fi

    CD_TAR=cd-${CD_VER}_${KERNEL}${TYPE}_lib.${TAR_EXT}
    if [ "$CDLUA_EXTRA_TAR" == "true" ]
     then
       CDLUA51_TAR=cd-${CD_VER}-Lua51_${KERNEL}${TYPE}_lib.${TAR_EXT}
       CDLUA52_TAR=cd-${CD_VER}-Lua52_${KERNEL}${TYPE}_lib.${TAR_EXT}
     else
       CDLUA_FOLDER=`basename $CD_TAR .$TAR_EXT`
    fi

    IM_TAR=im-${IM_VER}_${KERNEL}${TYPE}_lib.${TAR_EXT}
    if [ "$IMLUA_EXTRA_TAR" == 'true' ]
     then
       IMLUA51_TAR=im-${IM_VER}-Lua51_${KERNEL}${TYPE}_lib.${TAR_EXT}
       IMLUA52_TAR=im-${IM_VER}-Lua52_${KERNEL}${TYPE}_lib.${TAR_EXT}
     else
       IMLUA_FOLDER=`basename $IM_TAR .$TAR_EXT`
    fi

    [[ "$PRINT_SELEC" == "Yes" ]] && {
        echo "iup: '$IUP_TAR'"
        echo "iuplua51: '$IUPLUA51_TAR'"
        echo "iuplua52: '$IPULUA52_TAR'"
        echo "cd: '$CD_TAR'"
        echo "cdlua51: '$CDLUA51_TAR'"
        echo "cdlua52: '$CDLUA52_TAR'"
        echo "im: '$IM_TAR'"
        echo "imlua51: '$IMLUA51_TAR'"
        echo "imlua52: '$IMLUA52_TAR'"
        sleep 2
    }
}

function run_bash {
    echo ""
    echo "ejecutando '$1' en '$PWD'..."
    [[ -f "$1" ]] || { 
        echo "error: no existe el script '$1' en '$PWD'"
        return 1
    }
    ( yes | bash "$1" ) \
      || echo "ATENCION: hubo errores en la ejecución '$1' en '$PWD'"
    # algunas librerias dan errores en la copia de algunos archivos
    # sera por falta de actualizacion del script install?
    return 0
}

function install_libs {
    current_folder="$PWD"
    # verificar si no es necesario correr estos script con la variable USE_LUA51 o USE_LUA52
    for tar in $IUP_TAR $CD_TAR $IM_TAR
    do
        dest=`basename $tar .$TAR_EXT`
        cd "$TECDIR/$dest"
        run_bash "install" || return 1
        run_bash "install_dev" || return 1
    done
    if [ "$NOT_INSTALL_LUA52" == "Yes" ]
     then
      lua_vers=( '51' )
    else
      lua_vers=( '51' '52' )
    fi
    for lua in "${lua_vers[@]}"; do

        [[ "$lua" == "51" ]] && { export USE_LUA51=Yes; export USE_LUA52=""; }
        [[ "$lua" == "52" ]] && { export USE_LUA52=Yes; export USE_LUA51=""; }

        if [ "$IUPLUA_EXTRA_TAR" == 'true' ]
         then
            [[ "$lua" == "51" ]] && tar=$IUPLUA51_TAR 
            [[ "$lua" == "52" ]] && tar=$IUPLUA52_TAR 
            dest=`basename $tar .$TAR_EXT`
            cd "$TECDIR/$dest"
            run_bash "install" || return 1 # esto es necesario?
            run_bash "install_dev" || return 1 # esto es necesario?
            run_bash "config_lua_module" || return 1
        else 
            dest=$IUPLUA_FOLDER
            cd "$TECDIR/$dest"
            run_bash "config_lua_module" || return 1
        fi

        if [ "$CDLUA_EXTRA_TAR" == 'true' ]
         then
            [[ "$lua" == "51" ]] && tar=$CDLUA51_TAR 
            [[ "$lua" == "52" ]] && tar=$CDLUA52_TAR 
            dest=`basename $tar .$TAR_EXT`
            cd "$TECDIR/$dest"
            run_bash "install" || return 1 # esto es necesario?
            run_bash "install_dev" || return 1 # esto es necesario?
            run_bash "config_lua_module" || return 1
        else 
             dest=$CDLUA_FOLDER
             cd "$TECDIR/$dest"
             run_bash "config_lua_module" || return 1
        fi

        if [ "$IMLUA_EXTRA_TAR" == 'true' ]
         then
            [[ "$lua" == "51" ]] && tar=$IMLUA51_TAR 
            [[ "$lua" == "52" ]] && tar=$IMLUA52_TAR 
            dest=`basename $tar .$TAR_EXT`
            cd "$TECDIR/$dest"
            run_bash "install" || return 1 # esto es necesario?
            run_bash "install_dev" || return 1 # esto es necesario?
            run_bash "config_lua_module" || return 1
        else 
            dest=$IMLUA_FOLDER
            cd "$TECDIR/$dest"
            run_bash "config_lua_module" || return 1
        fi
    done
    cd $current_folder
    return 0
}

function uninstall_libs {
    current_folder="$PWD"
    for tar in $IUP_TAR $CD_TAR $IM_TAR
    do
        dest=`basename $tar .$TAR_EXT`
        [[ -d "$TECDIR/$dest" ]] && {
            cd "$TECDIR/$dest"
            run_bash "uninstall" || return 1
        } || echo "'$TECDIR/$dest' no existe, no se puede desinstalar"
    done
    for tar in $IUPLUA51_TAR $IPULUA52_TAR $CDLUA51_TAR $CDLUA52_TAR \
               $IMLUA51_TAR $IMLUA52_TAR
    do
        dest=`basename $tar .$TAR_EXT`
        [[ -d "$TECDIR/$dest" ]] && {
            cd "$TECDIR/$dest"
            run_bash "uninstall" || return 1
        } || echo "'$TECDIR/$dest' no existe, no se puede desinstalar"
    done
    cd $current_folder
    return 0
}

function install_tecgraf {
    echo "Verificando directorio para instalación"
    ./tools/check_src_dir $TECDIR && echo "OK" || {
        echo "error: no se pudo crear o modificar '$TECDIR'"
        exit 1
    }

    if ! ./tools/check_pkgs $DEPS; then
        if [ "root" != "$CURRENT_USER" ]; then
            echo "para instalar paquetes con apt-get es necesario hacerse root..."
            # todo check if deb-src enabled
            ./tools/run_as_root "apt-get" "install $DEPS" || { 
                echo "error al instalar con apt-get"
                exit 1
            }
        else
            apt-get install $DEPS || { 
                echo "error al instalar con apt-get"
                exit 1
            }
        fi
    fi

    for tar in $IUP_TAR $IUPLUA51_TAR $IPULUA52_TAR \
               $CD_TAR  $CDLUA51_TAR  $CDLUA52_TAR \
               $IM_TAR  $IMLUA51_TAR  $IMLUA52_TAR
    do
        dest=`basename $tar .$TAR_EXT`
        echo "descargando '$tar' para instalar en '$dest'"
        ./tools/download_and_untar $tar $URL $TECDIR $dest || exit 1
    done
    if [ "root" != "$CURRENT_USER" ]
     then
        echo ""
        echo -n "para instalar iup, cd y im en el sistema es "
        echo "necesario hacerse root..."
        ./tools/run_as_root "$OWN_PATH" "install_libs profile=$profile" || { 
            echo "install_libs falló"
            exit 1
        }
    else
       install_libs
    fi
}

function uninstall_tecgraf {
    if [ "root" != "$CURRENT_USER" ]
     then
        echo ""
        echo -n "para desinstalar iup, cd y im en el sistema es "
        echo "necesario hacerse root..."
        ./tools/run_as_root "$OWN_PATH" "uninstall_libs profile=$profile" || { 
            echo "uninstall_libs falló"
            exit 1
        }
    else
       uninstall_libs
    fi
}

function test_tecgraf {
    echo ""
    echo "Verificando instalacion..."
    fail_test=""
    for lib in 'iup' 'cd' 'im'; do
        lua5.1 -e "require '${lib}lua'" 2>/dev/null \
          && echo "lua5.1: ${lib}lua instalado OK!" \
          || { echo "lua5.1: ${lib}lua NO instalado"; fail_test="Yes"; }
        if [ "$NOT_INSTALL_LUA52" != "Yes" ]
          then
            lua5.2 -e "require '${lib}lua'" 2>/dev/null \
              && echo "lua5.2: ${lib}lua instalado OK!" \
              || { echo "lua5.2: ${lib}lua NO instalado"; fail_test="Yes"; }
        fi
    done
}

# TODO test_tecgraf_ver
# lua5.1 -e "require '${lib}lua'; print(${lib}.Version())"
# (comparar resultado con la version del profile ingresado, ej: $IUP_VER)

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = #

[[ "`uname -o`" == "GNU/Linux" ]] || {
   echo "Este script solo puede utilizarse en sistemas 'GNU/Linux'"
   exit 1
}
KERNEL="Linux32"            #"Linux44" #es para nombre interno del paquete tecgraf
TAR_EXT="tar.gz"
[[ "`uname -m`" == "x86_64" ]] && TYPE="_64" || TYPE=""

URL='http://codex.bibliohack.org/media/files/tecgraf'

OWN_PATH="$PWD/$0"
CURRENT_USER="$USER"

SRCDIR=/opt/src
TECDIR=$SRCDIR/tecgraf

set_tecgraf_profile "$2"
set_packages_param

case "$1" in
    install_libs)
        install_libs 
    ;;
    uninstall_libs)
        uninstall_libs
    ;;
    uninstall)
        uninstall_tecgraf
        test_tecgraf
    ;;
    '' | install_tecgraf)
        install_tecgraf
        test_tecgraf
        [[ "$fail_test" == "Yes" ]] && exit 1
    ;;
    luatest)
        test_tecgraf
        [[ "$fail_test" == "Yes" ]] && exit 1
    ;;
    *)
        echo "ERROR: parametro desconocido '$1'"
        exit 1
esac

exit 0

